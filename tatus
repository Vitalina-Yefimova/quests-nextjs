warning: in the working copy of 'src/actions/orders.ts', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/components/content/profile/OrdersSection.tsx', LF will be replaced by CRLF the next time Git touches it
warning: in the working copy of 'src/utils/interfaces.ts', LF will be replaced by CRLF the next time Git touches it
[1mdiff --git a/src/actions/orders.ts b/src/actions/orders.ts[m
[1mindex 5b191fc..0b4740e 100644[m
[1m--- a/src/actions/orders.ts[m
[1m+++ b/src/actions/orders.ts[m
[36m@@ -2,6 +2,7 @@[m
 [m
 import { cookies } from 'next/headers';[m
 import { COOKIE_NAMES } from '@/utils/tokens';[m
[32m+[m[32mimport { OrderStatus } from '@/utils/interfaces';[m
 [m
 export interface Order {[m
   id: number;[m
[36m@@ -10,7 +11,15 @@[m [mexport interface Order {[m
   date: string;[m
   participants: number;[m
   price: number;[m
[32m+[m[32m  status: OrderStatus;[m
   createdAt: string;[m
[32m+[m[32m  updatedAt: string;[m
[32m+[m[32m  quest?: {[m
[32m+[m[32m    players: {[m
[32m+[m[32m      min: number;[m
[32m+[m[32m      max: number;[m
[32m+[m[32m    };[m
[32m+[m[32m  };[m
 }[m
 [m
 export interface CreateOrderData {[m
[1mdiff --git a/src/components/content/profile/OrdersSection.tsx b/src/components/content/profile/OrdersSection.tsx[m
[1mindex 8fecf42..4a8654c 100644[m
[1m--- a/src/components/content/profile/OrdersSection.tsx[m
[1m+++ b/src/components/content/profile/OrdersSection.tsx[m
[36m@@ -2,6 +2,7 @@[m
 [m
 import { useState, useEffect } from "react";[m
 import { getOrders, updateOrder, deleteOrder, Order } from "@/actions/orders";[m
[32m+[m[32mimport { OrderStatus } from "@/utils/interfaces";[m
 import Link from "next/link";[m
 [m
 export default function OrdersSection() {[m
[36m@@ -10,10 +11,27 @@[m [mexport default function OrdersSection() {[m
   const [error, setError] = useState<string | null>(null);[m
   const [editOrderId, setEditOrderId] = useState<number | null>(null);[m
   const [editDate, setEditDate] = useState("");[m
[31m-  const [editParticipants, setEditParticipants] = useState(1);[m
[32m+[m[32m  const [editParticipants, setEditParticipants] = useState("1");[m
   const [editError, setEditError] = useState<string | null>(null);[m
   const [deleteError, setDeleteError] = useState<string | null>(null);[m
 [m
[32m+[m[32m  const statusConfig = {[m
[32m+[m[32m    [OrderStatus.PENDING]: { color: "text-yellow-400", text: "Pending" },[m
[32m+[m[32m    [OrderStatus.CONFIRMED]: { color: "text-green-400", text: "Confirmed" },[m
[32m+[m[32m    [OrderStatus.CANCELLED]: { color: "text-red-400", text: "Cancelled" }[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const getStatusColor = (status: OrderStatus) => statusConfig[status]?.color || "text-gray-400";[m
[32m+[m[32m  const getStatusText = (status: OrderStatus) => statusConfig[status]?.text || "Unknown";[m
[32m+[m
[32m+[m[32m  const canEditOrder = (order: Order) => {[m
[32m+[m[32m    return order.status !== OrderStatus.CANCELLED;[m
[32m+[m[32m  };[m
[32m+[m
[32m+[m[32m  const canCancelOrder = (order: Order) => {[m
[32m+[m[32m    return order.status !== OrderStatus.CANCELLED;[m
[32m+[m[32m  };[m
[32m+[m
   useEffect(() => {[m
     const fetchOrders = async () => {[m
       const result = await getOrders();[m
[36m@@ -28,69 +46,67 @@[m [mexport default function OrdersSection() {[m
   }, []);[m
 [m
   const handleEdit = (order: Order) => {[m
[32m+[m[32m    if (!canEditOrder(order)) {[m
[32m+[m[32m      setEditError("Cannot edit cancelled order.");[m
[32m+[m[32m      return;[m
[32m+[m[32m    }[m
     setEditOrderId(order.id);[m
     setEditDate(order.date.split("T")[0]);[m
[31m-    setEditParticipants(order.participants);[m
[32m+[m[32m    setEditParticipants(order.participants.toString());[m
     setEditError(null);[m
   };[m
 [m
   const handleCancelEdit = () => {[m
     setEditOrderId(null);[m
     setEditDate("");[m
[31m-    setEditParticipants(1);[m
[32m+[m[32m    setEditParticipants("1");[m
     setEditError(null);[m
   };[m
 [m
   const handleSaveEdit = async (id: number) => {[m
     setEditError(null);[m
[31m-    const now = new Date();[m
[31m-    const questDate = new Date(editDate);[m
[31m-    const diffInDays = Math.ceil([m
[31m-      (questDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)[m
[31m-    );[m
[31m-[m
[31m-    if (diffInDays < 7) {[m
[31m-      setEditError([m
[31m-        "Date cannot be changed less than 7 days before the quest."[m
[31m-      );[m
[32m+[m
[32m+[m[32m    const participantsNum = parseInt(editParticipants, 10);[m
[32m+[m[32m    if (isNaN(participantsNum) || participantsNum < 1) {[m
[32m+[m[41m [m
       return;[m
     }[m
 [m
     const result = await updateOrder(id, {[m
       date: editDate,[m
[31m-      participants: editParticipants,[m
[32m+[m[32m      participants: participantsNum,[m
     });[m
 [m
     if (result.success) {[m
       setOrders((prev) =>[m
         prev.map((order) =>[m
           order.id === id[m
[31m-            ? { ...order, date: editDate, participants: editParticipants }[m
[32m+[m[32m            ? { ...order, date: editDate, participants: participantsNum }[m
             : order[m
         )[m
       );[m
       handleCancelEdit();[m
     } else {[m
[31m-      setEditError(result.error || "Failed to update order.");[m
[32m+[m[32m      let errorMessage = result.error || "Failed to update order.";[m
[32m+[m[41m      [m
[32m+[m[32m      try {[m
[32m+[m[32m        const errorMatch = errorMessage.match(/\{"message":"([^"]+)"/);[m
[32m+[m[32m        if (errorMatch) {[m
[32m+[m[32m          errorMessage = errorMatch[1];[m
[32m+[m[32m        }[m
[32m+[m[32m      } catch (e) {[m
[32m+[m[32m      }[m
[32m+[m[41m      [m
[32m+[m[32m      setEditError(errorMessage);[m
     }[m
   };[m
 [m
[31m-  const handleDelete = async (id: number, date: string) => {[m
[32m+[m[32m  const handleDelete = async (order: Order) => {[m
     setDeleteError(null);[m
[31m-    const now = new Date();[m
[31m-    const questDate = new Date(date);[m
[31m-    const diffInDays = Math.ceil([m
[31m-      (questDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)[m
[31m-    );[m
[31m-[m
[31m-    if (diffInDays < 7) {[m
[31m-      setDeleteError("Cannot cancel less than 7 days before the quest date.");[m
[31m-      return;[m
[31m-    }[m
 [m
[31m-    const result = await deleteOrder(id);[m
[32m+[m[32m    const result = await deleteOrder(order.id);[m
     if (result.success) {[m
[31m-      setOrders((prev) => prev.filter((order) => order.id !== id));[m
[32m+[m[32m      setOrders((prev) => prev.filter((orderItem) => orderItem.id !== order.id));[m
     } else {[m
       setDeleteError(result.error || "Failed to cancel order.");[m
     }[m
[36m@@ -123,12 +139,12 @@[m [mexport default function OrdersSection() {[m
               <label className="text-sm block">Participants</label>[m
               <input[m
                 type="number"[m
[31m-                min={1}[m
[31m-                max={8}[m
[32m+[m[32m                min={orders.find(order => order.id === editOrderId)?.quest?.players?.min}[m
[32m+[m[32m                max={orders.find(order => order.id === editOrderId)?.quest?.players?.max}[m
                 value={editParticipants}[m
[31m-                onChange={(e) =>[m
[31m-                  setEditParticipants(Math.max(1, Number(e.target.value)))[m
[31m-                }[m
[32m+[m[32m                onChange={(e) => {[m
[32m+[m[32m                  setEditParticipants(e.target.value);[m
[32m+[m[32m                }}[m
                 className="bg-gray-800 text-white p-2 rounded w-full"[m
               />[m
               <p className="text-red-500 text-sm min-h-[20px]">[m
[36m@@ -157,27 +173,47 @@[m [mexport default function OrdersSection() {[m
               >[m
                 {order.questTitle}[